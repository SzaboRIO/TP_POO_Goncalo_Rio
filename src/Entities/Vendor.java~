package Entities;

import Items.ItemHero;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class Vendor {
    private ArrayList<ItemHero> store;

    public Vendor() {
        this.store = new ArrayList<>();
    }

    public void addItem(ItemHero item) {
        store.add(item);
    }

    public void printStore() {
        System.out.println("üõí Welcome to the Middle-earth Market! Here are today's items: ");

        // Shuffle and select 10 random items
        Collections.shuffle(store);
        int itemsToShow = Math.min(10, store.size());

        for (int i = 0; i < itemsToShow; i++) {
            System.out.println("üîπ [" + (i + 1) + "] " + store.get(i).getName() + " - " + store.get(i).getPrice() + " ü™ô");
        }
    }

    public void sellItem(Hero hero) {
        Scanner scanner = new Scanner(System.in);
        printStore();

        if (store.isEmpty()) {
            System.out.println("üö´ The store is empty! Come back later.");
            return;
        }

        System.out.println("üí∞ You have " + hero.getGold() + " ü™ô.");
        System.out.println("Enter the number of the item you wish to buy (0 to cancel): ");
        int choice = scanner.nextInt();

        if (choice == 0) {
            System.out.println("‚ùå Transaction canceled.");
            return;
        }

        if (choice < 1 || choice > store.size()) {
            System.out.println("‚ùå Invalid selection.");
            return;
        }

        ItemHero selectedItem = store.get(choice - 1);

        // Check if hero has enough gold
        if (hero.getGold() < selectedItem.getPrice()) {
            System.out.println("‚ùå Not enough gold! You need " + selectedItem.getPrice() + " ü™ô.");
            return;
        }

        // Check if hero can use the item
        if (!selectedItem.getAllowedHeroes().isEmpty() && !selectedItem.getAllowedHeroes().contains(hero.getClass().getSimpleName())) {
            System.out.println("‚ùå You cannot use this item.");
            return;
        }

        // Hero buys the item
        hero.spendGold(selectedItem.getPrice());
        hero.addItem(selectedItem);
        store.remove(selectedItem);
        System.out.println("‚úÖ " + hero.getName() + " has purchased " + selectedItem.getName() + "!");
    }

    public void buyFromHero(Hero hero) {
        Scanner scanner = new Scanner(System.in);

        if (hero.inventory.isEmpty()) {
            System.out.println("üéí You have nothing to sell!");
            return;
        }

        System.out.println("üõí Items you can sell:");
        for (int i = 0; i < hero.inventory.size(); i++) {
            System.out.println("üîπ [" + (i + 1) + "] " + hero.inventory.get(i).getName() + " - " + (hero.inventory.get(i).getPrice() / 2) + " ü™ô");
        }

        System.out.println("Enter the number of the item to sell (0 to cancel): ");
        int choice = scanner.nextInt();

        if (choice == 0) {
            System.out.println("‚ùå Sale canceled.");
            return;
        }

        if (choice < 1 || choice > hero.inventory.size()) {
            System.out.println("‚ùå Invalid selection.");
            return;
        }

        ItemHero selectedItem = hero.inventory.get(choice - 1);
        int salePrice = selectedItem.getPrice() / 2; // Vendors buy for half price

        hero.addGold(salePrice);
        hero.removeItem((Items.Consumable) selectedItem);
        System.out.println("üí∞ Sold " + selectedItem.getName() + " for " + salePrice + " ü™ô!");
    }
}
